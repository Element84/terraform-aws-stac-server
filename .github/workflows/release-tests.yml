name: Main Branch and Release Testing

on:
  # TODO: remove this pull_request trigger after testing is complete
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  # Allows manual testing
  workflow_dispatch:

# TODO:
# - Github env vars/secrets made available to this repo 
# - CI.tfvars
# - Prepararing Environment statefile (can be simplified to use s3 state locking)
# - After full testing, uncomment slack channel status...? Or we don't want slack channel posts?

jobs:
  pre-commit:
    uses: ./.github/workflows/reusable-precommit.yml
    
  release-tests:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    env:
      CI: true
      # Ensure this matches inputs.tf stac_server_version default value
      STAC_SERVER_TAG: v3.10.0
    steps:
      - uses: actions/checkout@v5

      # Here we read the terraform version from the .terraform-version file, and then install that version
      - name: Get Terraform version
        id: tf_version
        run: |
          echo "value=$(cat .terraform-version)" >> $GITHUB_OUTPUT
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.tf_version.outputs.value }}

      - name: Setting Pre-Requisites
        id: prereqs
        run: |
          echo "REPOSITORY_NAME=`echo \"${{  github.ref_name }}\" | tr -d '.' | cut -c1-8`" >> $GITHUB_ENV

      - name: Preparing Environment
        id: prep_env
        run: |
          cat ci.tfvars
          envsubst < scripts/cicd.backend.tf > cicd.backend.tf
          cat cicd.backend.tf

      # - name: Update stac-server lambdas
      #   id: update_stac_lambdas
      #   run: ./scripts/update-lambdas.bash

      # - name: Configure Terraform Init Credentials
      #   id: init_creds
      #   uses: aws-actions/configure-aws-credentials@v5
      #   with:
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     role-to-assume: ${{ secrets.AWS_ROLE }}
      #     role-session-name: GitHubReleaseInit

      # - name: Terraform Init
      #   id: tf_init
      #   run: terraform init

      # - name: Terraform Validate
      #   id: tf_validate
      #   run: terraform validate

      # - name: Configure Terraform Plan Credentials
      #   id: plan_creds
      #   uses: aws-actions/configure-aws-credentials@v5
      #   with:
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     role-to-assume: ${{ secrets.AWS_ROLE }}
      #     role-session-name: GitHubReleasePlan

      # - name: Terraform Plan
      #   id: tf_plan
      #   run: terraform plan -var-file="ci.tfvars" -out test.tfplan

      # - name: Configure Terraform Apply Credentials
      #   id: apply_creds
      #   uses: aws-actions/configure-aws-credentials@v5
      #   with:
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     role-to-assume: ${{ secrets.AWS_ROLE }}
      #     role-session-name: GitHubReleaseApply

      # - name: Terraform Apply
      #   id: tf_apply
      #   continue-on-error: true
      #   run: terraform apply -input=false test.tfplan

      # # - name: Post status to Slack channel
      # #   id: tf_apply_successs
      # #   if: steps.tf_apply.outcome == 'success'
      # #   continue-on-error: true
      # #   uses: slackapi/slack-github-action@v1.26.0
      # #   with:
      # #     channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      # #     slack-message: ":badger_dance: terraform-aws-stac-server - ${{  github.ref_name }} terraform apply job has succeeded!\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      # #   env:
      # #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # # - name: Post status to Slack channel
      # #   id: tf_apply_failure
      # #   if: steps.tf_apply.outcome != 'success'
      # #   continue-on-error: true
      # #   uses: slackapi/slack-github-action@v1.26.0
      # #   with:
      # #     channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      # #     slack-message: ":sadpanda: terraform-aws-stac-server -${{  github.ref_name }} terraform apply has failed!\n:alert: make sure cleanup job deletes all AWS resources!\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      # #   env:
      # #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # - name: Configure Terraform Cleanup Check Credentials
      #   id: cleanup_check_creds
      #   if: always()
      #   uses: aws-actions/configure-aws-credentials@v5
      #   with:
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     role-to-assume: ${{ secrets.AWS_ROLE }}
      #     role-session-name: GitHubReleaseCleanupCheck

      # - name: Terraform Destroy Pre-Check
      #   id: tf_destroy_plan
      #   if: always()
      #   run: terraform plan -destroy -var-file="ci.tfvars" -out test-cleanup.tfplan

      # - name: Configure Terraform Cleanup Credentials
      #   id: cleanup_creds
      #   if: always()
      #   uses: aws-actions/configure-aws-credentials@v5
      #   with:
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     role-to-assume: ${{ secrets.AWS_ROLE }}
      #     role-session-name: GitHubReleaseCleanup

      # - name: Terraform Destroy
      #   id: tf_destroy_apply
      #   if: always()
      #   continue-on-error: true
      #   run: terraform apply -destroy -input=false test-cleanup.tfplan

      # # - name: Post status to Slack channel
      # #   id: tf_destroy_apply_successs
      # #   if: steps.tf_destroy_apply.outcome == 'success'
      # #   continue-on-error: true
      # #   uses: slackapi/slack-github-action@v1.26.0
      # #   with:
      # #     channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      # #     slack-message: ":badger_dance: terraform-aws-stac-server - ${{  github.ref_name }} cleanup job has succeeded!\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      # #   env:
      # #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # # - name: Post status to Slack channel
      # #   id: tf_destroy_apply_failure
      # #   if: steps.tf_destroy_apply.outcome != 'success'
      # #   continue-on-error: true
      # #   uses: slackapi/slack-github-action@v1.26.0
      # #   with:
      # #     channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      # #     slack-message: ":sadpanda: terraform-aws-stac-server -${{  github.ref_name }} cleanup job has failed!\n:alert: make sure AWS resources are deleted!\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      # #   env:
      # #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
